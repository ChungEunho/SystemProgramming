// Assignment 2 - Efficient C Programming
// System Programming, DGIST, Prof. Yeseong Kim
// 
// YOU WILL TURN IN THIS FILE.
// Read the provided instruction carefully.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "bmplib.h"
#include "hw2.h"

#define block_size 100

// This implementation is simply copied from "main.c".
// Your job is to modify and optimize it for better performance!

// static Pixel convolution(
//         Pixel* input, int x, int y, int width, int height, float* filter) {
//     double r = 0;
//     double g = 0;
//     double b = 0;

//     for (int dx = -1; dx <= 1; ++dx) {
//         int nx = x + dx;
//         if (nx < 0 || nx >= height) continue;

//         for (int dy = -1; dy <= 1; ++dy) {
//             int ny = y + dy;
//             if (ny < 0 || ny >= width) continue;

//             int filterIndex = (dx + 1) + (dy + 1) * 3;
//             int pixelIndex = nx + ny * width;

//             r += input[pixelIndex].r * filter[filterIndex];
//             g += input[pixelIndex].g * filter[filterIndex];
//             b += input[pixelIndex].b * filter[filterIndex];
//         }
//     }

//     // 클램핑
//     r = (r < 0) ? 0 : (r > 255) ? 255 : r;
//     g = (g < 0) ? 0 : (g > 255) ? 255 : g;
//     b = (b < 0) ? 0 : (b > 255) ? 255 : b;

//     Pixel p;
//     p.r = (unsigned char)r;
//     p.g = (unsigned char)g;
//     p.b = (unsigned char)b;

//     return p;
// }

void filter_optimized(void* args[]) {
    unsigned int width = *(unsigned int*)args[0];
    unsigned int height = *(unsigned int*)args[1];
    Pixel* input = args[2];
    Pixel* output = args[3];
    float* filter = args[4];

    // Iterate over blocks
    for (int block_row = 0; block_row < height; block_row += block_size) {
        for (int block_col = 0; block_col < width; block_col += block_size) {
            // Compute bounds for the current block
            int block_end_row = block_row + block_size;
            int block_end_col = block_col + block_size;

            // Ensure that block bounds do not exceed the image dimensions
            if (block_end_row > height) block_end_row = height;
            if (block_end_col > width) block_end_col = width;

            // Iterate over pixels in the current block
            for (int x = block_row; x < block_end_row; ++x) {
                for (int y = block_col; y < block_end_col; ++y) {
                    // Compute indices for input and output pixels
                    int output_index = x * width + y;

                    // Convolution operation
                    double r = 0, g = 0, b = 0;
                    for (int dx = -1; dx <= 1; ++dx) {
                        int nx = x + dx;
                        if (nx < 0 || nx >= height) continue;

                        for (int dy = -1; dy <= 1; ++dy) {
                            int ny = y + dy;
                            if (ny < 0 || ny >= width) continue;

                            int filter_index = (dx + 1) + (dy + 1) * 3;
                            int pixel_index = nx * width + ny;

                            r += input[pixel_index].r * filter[filter_index];
                            g += input[pixel_index].g * filter[filter_index];
                            b += input[pixel_index].b * filter[filter_index];
                        }
                    }

                    // 클램핑
                    r = (r < 0) ? 0 : (r > 255) ? 255 : r;
                    g = (g < 0) ? 0 : (g > 255) ? 255 : g;
                    b = (b < 0) ? 0 : (b > 255) ? 255 : b;

                    // Store the result
                    output[output_index].r = (unsigned char)r;
                    output[output_index].g = (unsigned char)g;
                    output[output_index].b = (unsigned char)b;
                }
            }
        }
    }
}

